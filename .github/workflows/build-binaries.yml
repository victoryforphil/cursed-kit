name: Build Platform Binaries

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Linux builds
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
        include:
          - target: x86_64-unknown-linux-gnu
            arch: x86_64
          - target: aarch64-unknown-linux-gnu
            arch: aarch64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      # Install cross-compilation tools
      - name: Install cross-compilation dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      
      # Install general dependencies
      - name: Install general dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
      
      # Build with cargo and enable vendored openssl feature
      - name: Build binary
        run: |
          cd cursed-ws/cursed-ws-bridge
          cargo build --release --target ${{ matrix.target }} --features vendored-openssl
          
          # Print directory structure to debug issues
          echo "Directory structure:"
          ls -la
          echo "Target directory structure:"
          ls -la target/ || echo "Target directory not found"
          echo "Target arch directory:"
          ls -la target/${{ matrix.target }}/ || echo "${{ matrix.target }} directory not found"
          echo "Release directory:"
          ls -la target/${{ matrix.target }}/release/ || echo "Release directory not found"
          
          # Verify binary exists
          if [ ! -f "target/${{ matrix.target }}/release/cursed-ws-bridge" ]; then
            echo "❌ Binary for ${{ matrix.target }} was not created!"
            exit 1
          fi
          echo "✅ Binary for ${{ matrix.target }} successfully built"
      
      # Upload artifacts
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: cursed-ws-bridge-${{ matrix.arch }}-linux
          path: ./cursed-ws/cursed-ws-bridge/target/${{ matrix.target }}/release/cursed-ws-bridge
          if-no-files-found: error
      
      # Print summary
      - name: Print Usage Summary
        run: |
          echo "## Linux ${{ matrix.arch }} Binary" >> $GITHUB_STEP_SUMMARY
          echo "Download and run with:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "chmod +x cursed-ws-bridge && ./cursed-ws-bridge" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # macOS build (universal)
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin aarch64-apple-darwin
      
      # Install OpenSSL for macOS
      - name: Install OpenSSL
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
      
      # Build for x86_64
      - name: Build for x86_64
        run: |
          cd cursed-ws/cursed-ws-bridge
          OPENSSL_DIR=${{ env.OPENSSL_DIR }} cargo build --release --target x86_64-apple-darwin --features vendored-openssl
          ls -la target/x86_64-apple-darwin/release/
          # Verify binary exists
          if [ ! -f "target/x86_64-apple-darwin/release/cursed-ws-bridge" ]; then
            echo "❌ x86_64 binary was not created!"
            exit 1
          fi
          echo "✅ x86_64 binary successfully built"
      
      # Build for ARM64
      - name: Build for ARM64
        run: |
          cd cursed-ws/cursed-ws-bridge
          OPENSSL_DIR=${{ env.OPENSSL_DIR }} cargo build --release --target aarch64-apple-darwin --features vendored-openssl
          ls -la target/aarch64-apple-darwin/release/
          # Verify binary exists
          if [ ! -f "target/aarch64-apple-darwin/release/cursed-ws-bridge" ]; then
            echo "❌ ARM64 binary was not created!"
            exit 1
          fi
          echo "✅ ARM64 binary successfully built"
      
      # Create universal binary
      - name: Create universal binary
        run: |
          cd cursed-ws/cursed-ws-bridge
          
          echo "Verifying source binaries exist before creating universal binary:"
          echo "x86_64 binary path: $(pwd)/target/x86_64-apple-darwin/release/cursed-ws-bridge"
          echo "ARM64 binary path: $(pwd)/target/aarch64-apple-darwin/release/cursed-ws-bridge"
          
          ls -la target/x86_64-apple-darwin/release/ || echo "x86_64 directory not found"
          ls -la target/aarch64-apple-darwin/release/ || echo "ARM64 directory not found"
          
          mkdir -p target/universal/release
          
          if [ -f "target/x86_64-apple-darwin/release/cursed-ws-bridge" ] && [ -f "target/aarch64-apple-darwin/release/cursed-ws-bridge" ]; then
            echo "Creating universal binary with lipo..."
            lipo -create \
              target/x86_64-apple-darwin/release/cursed-ws-bridge \
              target/aarch64-apple-darwin/release/cursed-ws-bridge \
              -output target/universal/release/cursed-ws-bridge
            
            echo "Verifying universal binary was created:"
            ls -la target/universal/release/
            
            # Check the architecture of the universal binary
            echo "Universal binary architecture info:"
            lipo -info target/universal/release/cursed-ws-bridge
          else
            echo "❌ Cannot create universal binary - source binaries missing"
            exit 1
          fi
      
      # Upload x86_64 binary separately (for debugging)
      - name: Upload x86_64 binary
        uses: actions/upload-artifact@v4
        with:
          name: cursed-ws-bridge-x86_64-macos
          path: cursed-ws/cursed-ws-bridge/target/x86_64-apple-darwin/release/cursed-ws-bridge
          if-no-files-found: warn
      
      # Upload ARM64 binary separately (for debugging)
      - name: Upload ARM64 binary
        uses: actions/upload-artifact@v4
        with:
          name: cursed-ws-bridge-arm64-macos
          path: cursed-ws/cursed-ws-bridge/target/aarch64-apple-darwin/release/cursed-ws-bridge
          if-no-files-found: warn
      
      # Upload universal binary
      - name: Upload universal binary
        uses: actions/upload-artifact@v4
        with:
          name: cursed-ws-bridge-universal-macos
          path: cursed-ws/cursed-ws-bridge/target/universal/release/cursed-ws-bridge
          if-no-files-found: error
      
      # Print summary
      - name: Print Usage Summary
        run: |
          echo "## macOS Universal Binary" >> $GITHUB_STEP_SUMMARY
          echo "Download and run with:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "chmod +x cursed-ws-bridge && ./cursed-ws-bridge" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
  
  # Windows build
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      
      # Build with cargo
      - name: Build binary
        run: |
          cd cursed-ws/cursed-ws-bridge
          cargo build --release --target x86_64-pc-windows-msvc --features vendored-openssl
          
          # Verify binary exists
          if (-Not (Test-Path "target/x86_64-pc-windows-msvc/release/cursed-ws-bridge.exe")) {
            Write-Host "❌ Windows binary was not created!"
            exit 1
          }
          Write-Host "✅ Windows binary successfully built"
      
      # Upload artifact
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: cursed-ws-bridge-x86_64-windows
          path: cursed-ws/cursed-ws-bridge/target/x86_64-pc-windows-msvc/release/cursed-ws-bridge.exe
          if-no-files-found: error
      
      # Print summary
      - name: Print Usage Summary
        run: |
          echo "## Windows x86_64 Binary" >> $env:GITHUB_STEP_SUMMARY
          echo "Download and run with:" >> $env:GITHUB_STEP_SUMMARY
          echo '```powershell' >> $env:GITHUB_STEP_SUMMARY
          echo ".\cursed-ws-bridge.exe" >> $env:GITHUB_STEP_SUMMARY
          echo '```' >> $env:GITHUB_STEP_SUMMARY

  # Create a release if this is a tag
  create-release:
    needs: [build-linux, build-macos, build-windows]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      # Debug artifact structure
      - name: Check artifact structure
        run: |
          echo "Artifact directory structure:"
          find artifacts -type f | sort
      
      # Create release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/cursed-ws-bridge-x86_64-linux/cursed-ws-bridge
            artifacts/cursed-ws-bridge-aarch64-linux/cursed-ws-bridge
            artifacts/cursed-ws-bridge-universal-macos/cursed-ws-bridge
            artifacts/cursed-ws-bridge-x86_64-windows/cursed-ws-bridge.exe
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
      
      # Print comprehensive summary
      - name: Print Release Summary
        run: |
          echo "## Cursed-WS-Bridge Binaries" >> $GITHUB_STEP_SUMMARY
          echo "### Linux (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "chmod +x cursed-ws-bridge-x86_64-linux && ./cursed-ws-bridge-x86_64-linux" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "### Linux (ARM64)" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "chmod +x cursed-ws-bridge-aarch64-linux && ./cursed-ws-bridge-aarch64-linux" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "### macOS (Universal)" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "chmod +x cursed-ws-bridge-universal-macos && ./cursed-ws-bridge-universal-macos" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "### Windows" >> $GITHUB_STEP_SUMMARY
          echo '```powershell' >> $GITHUB_STEP_SUMMARY
          echo ".\cursed-ws-bridge-x86_64-windows.exe" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY 